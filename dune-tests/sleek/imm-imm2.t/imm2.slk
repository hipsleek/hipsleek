data node { int val ; node next }.
pred ll<n> == self = null & n = 0
	or self::node<next = r> * r::ll<n-1> 
	inv n >= 0.



checkentail (x::ll<n>@L & y::ll<m>@L) & n>0 & m>0  |- (y::ll<m1>@L & x::ll<n1>@L) & y!=x.
//1. Fail


checkentail (x::ll<n>@L * y::ll<m>@L)  |- (y::ll<m1>@L & x::ll<n1>@L).
print residue.
// x@L * y@L
//2. Valid


checkentail (x::ll<n>@L & y::ll<m>@L) & x!=null & y!=null  |- (y::ll<m1>@L * x::ll<n1>@L).
//print residue.
//3. Fail


checkentail (x::ll<n>@L * y::ll<m>@L) ; p::ll<_> * ((t::ll<a>@L); z::ll<m>) & n > 3 |- (y::ll<m1>@L & x::ll<n1>@L).
//print residue.
// x * y; p * (t; z)
//4. Valid.


checkentail (x::ll<n>@L & y::ll<m>@L & t::ll<a>@L); z::ll<m> & n > 3  |- (y::ll<m1>@L & x::ll<n1>@L) & n1>6.
//print residue.
//5. Fail



