data node {
  node next;
}.

// --eps

//Fail.Fail.Valid.Valid.Fail.Valid.
//Valid.Fail.Fail.
//Valid.Fail.Fail.Valid.Valid.Valid.

pred l3<> == 
  self::node<q>*q::node<_> 
inv self!=null.

pred l3a<> == 
  self::node<q>*q::node<_>  & self=q
inv self!=null.

//(1) fail
checkentail x::l3<> |- false.
expect Fail.

//(2) fail
checkentail x::l3<> * c::node<_> |- false.
expect Fail.

//(3) valid
checkentail x::l3a<> |- false.
expect Valid.

//(4) valid
checkentail x::l3<> * x::l3<> |- false.
expect Valid.


pred l4<q:node> == 
  (exists z: self::node<r>*r::node<_> & r=z & z=q)
inv self!=null.
// baga {self,q}

// (5) fail
checkentail x::l4<c> * d::node<_> |- false.
expect Fail.

// (6) valid
checkentail x::l4<c> * c::node<_> |- false.
expect Valid.


pred l5<k> == 
  self::node<q>*q::node<_> & k=q & self!=q
inv self!=null.

// (7) valid
checkentail x::l5<c> * c::node<_> |- false.
expect Valid.

// (8) fail
checkentail x::l5<c> * q::node<_> |- false.
expect Fail.

pred l6<q:node> == 
  q::node<_> & self=null
  or self::node<r>*r::node<_> & r=q
inv q!=null.
// baga {q}

// (9) Fail
checkentail x::l6<_> * x::l6<_> |- false.
expect Fail.

// (10) Valid
checkentail x::l6<q> * y::l6<q> |- false.
expect Valid.

// (11) Fail
checkentail x::l6<q> * y::l6<_> |- false.
expect Fail.

pred l7<q:node> == 
  self=null & q=null
  or self::node<r>*r::node<_> & r=q
inv true.

// (12) Fail
checkentail x::l7<q> * x::l7<q> |- false.
expect Fail.

// (13) Valid
checkentail x::l7<q> * x::l7<q> & x!=null |- q!=null.
expect Valid.

// --eps
// (14) Valid
checkentail x::l7<q> * x::l7<q> & x!=null |- false.
expect Valid.

// --eps
// (15) Valid
checkentail x::l7<q> * y::l7<q> & x!=null & y!=null |- false.
expect Valid.
