/*
  For static barriers, a=0 always.
  Do dynamic barriers, a!=0 possibly (both negative and positive)
*/

//********************************************
//********************************************
lemma "D-SPLIT" self::barrier(c,t,a)<p> & 0<c<=t+a & c=c1+c2 & a=a1+a2 & 0<c1<t+a1 & 0<c2<t+a2 & a1*c=c1*a & a2*c=c2*a -> self::barrier(c1,t,a1)<p> * self::barrier(c2,t,a2)<p>.

lemma "D-FULL" self::barrier(c,t,a)<p> & c=t+a & a!=0 & c>0 -> self::barrier(c,t+a,0)<p>.

//combine successfully
lemma "D-COMBINE-1" self::barrier(c1,t,a1)<p> * self::barrier(c2,t,a2)<p> & c1!=0 & c2!=0 -> self::barrier(c1+c2,t,a1+a2)<p>.

//combine successfully, ordering is not important
lemma "D-COMBINE-2" self::barrier(c1,t,a1)<p1> * self::barrier(c2,t,a2)<p2> & c1!=0 & c2=0 & p2<=p1 -> self::barrier(c1,t,a1+a2)<p1>.

//combine successfully
lemma "D-COMBINE-3" self::barrier(0,t,a1)<p1> * self::barrier(0,t,a2)<p2> -> self::barrier(0,t,a1+a2)<p> & p=max(p1,p2).


//detect inconsistency
lemma "D-FAIL-1" self::barrier(c1,t,a1)<p1> * self::barrier(c2,t,a2)<p2> & c1!=0 & c2!=0 & p1!=p2 -> true & flow __Fail.

//detect inconsistency
lemma "D-FAIL-2" self::barrier(c1,t,a1)<p1> * self::barrier(c2,t,a2)<p2> & c1!=0 & c2=0 & p1<p2 -> true & flow __Fail.

//D-SEP is not implemented as a lemma
//D-SEP is done automatically in xpure_perm
//"D-SEP" b1::barrier(c1,t,a1)<p> * b2::barrier(c2,t,a2)<p> & (t1!=t2 || c1+c2>t1+a1+a2  -> b1!=b2.

//********************************************
//********************************************

//(1)
checkentail b::barrier(2,3,1)<p> |- b::barrier(1,3,1/2)<p>*b::barrier(1,3,1/2)<p>.
print residue. //VALID, 1 residue

//(2)
checkentail b::barrier(1,3,1)<p> |- b::barrier(0,3,0)<p>*b::barrier(1,3,1)<p>.
print residue. //FAIL, zero-permission is not allowed when SPLIT
// due to 0<c1<t+a1 & 0<c2<t+a2

//(3)
checkentail b::barrier(3,2,1)<p> |- b::barrier(3,3,0)<p>.
print residue.//VALID, D-FULL

//(4)
checkentail b::barrier(3,2,1)<p> |- b::barrier(1,3,0)<p> * b::barrier(2,3,0)<p>.
print residue. //VALID, D-FULL -> D-SPLIT -> MATCH -> MATCH

//(5)
checkentail b::barrier(1,3,0)<p> * b::barrier(2,3,2*3/5)<p>  * b::barrier(3,3,3*3/5)<p> |- b::barrier(6,3,3)<p>.
print residue. //VALID, 1 residue, D-COMBINE1 -> D-COMBINE1 -> MATCH


//(6)
checkentail b::barrier(1,3,0)<p> * b::barrier(2,3,2*3/5)<p>  * b::barrier(3,3,3*3/5)<p> |- b::barrier(6,6,0)<p>.
print residue. //VALID, 1 residue, D-COMBINE1 -> D-COMBINE1 -> D-FULL -> MATCH

//(7)
checkentail b::barrier(0,3,-1)<1> * b::barrier(0,3,-1)<2> |- b::barrier(0,3,-2)<2>.
print residue. //VALID, 1 residue, D-COMBINE3

//(8)
checkentail b::barrier(0,3,-1)<2> * b::barrier(0,3,-1)<1> |- b::barrier(0,3,-2)<2>.
print residue. //VALID, 1 residue,  D-COMBINE3

//(9)
checkentail b::barrier(0,3,-1)<2> * b::barrier(0,3,-1)<1> |- b::barrier(0,3,-2)<1>.
print residue. //FAIL, p=2

//(10)
checkentail b::barrier(1,3,0)<2> * b::barrier(0,3,-1)<1> |- b::barrier(1,3,-1)<2>.
print residue. //VALID, 1 residue,  D-COMBINE2

//(11)
checkentail b::barrier(0,3,-1)<1> * b::barrier(1,3,0)<2>  |- b::barrier(1,3,-1)<2>.
print residue. //VALID, 1 residue,  D-COMBINE2

//(12)
checkentail b::barrier(0,3,-1)<1> * b::barrier(1,3,0)<2>  |- b::barrier(1,3,-1)<1>.
print residue. //FAIL, 1 residue,  D-COMBINE2

//(13)
checkentail b::barrier(3,3,0)<0> |- b::barrier(1,3,0)<0> * b::barrier(1,3,0)<0> * b::barrier(1,3,0)<0>.
print residue. //VALID, 1 residue,  D-SPLIT --> D-SPLIT

//(14)
checkentail b::barrier(1,3,0)<2> * b::barrier(0,3,-1)<1> * b::barrier(0,3,-1)<0> |- b::barrier(1,3,-2)<2>.
print residue. //VALID, 1 residue, D-COMBINE

//(15)
checkentail b::barrier(1,3,0)<2> * b::barrier(0,3,-1)<1> * b::barrier(0,3,-1)<0> |- b::barrier(1,1,0)<2>.
print residue. //VALID, 1 residue, D-COMBINE --> D-FULL --> MATCH

//(16)
checkentail b::barrier(1,2,0)<2> |- b::barrier(1,2,0)<1>.
print residue. //FAIL

//(17)
checkentail b::barrier(0,2,-1)<2> |- b::barrier(0,2,-1)<1>.
print residue.// FAIL

//(18)
checkentail b::barrier(1,3,0)<1> * b::barrier(1,3,0)<2> |- true & flow __Fail.
print residue. //VALID, 1 residue, D-FAIL-1

//(19)
//19&20 --> ordering of heap nodes can be important for the residue
checkentail b::barrier(1,3,0)<1> * b::barrier(1,3,0)<1> * b::barrier(1,3,0)<2> |- true & flow __Fail.
print residue. //VALID, 1 residue, no heap, D-COMBINE-1 --> D-FAIL-1

//(20)
checkentail b::barrier(1,3,0)<1> * b::barrier(1,3,0)<2> * b::barrier(1,3,0)<1> |- true & flow __Fail.
print residue. //VALID, 1 residue, 1 heap, D-FAIL-1

//(21)
checkentail b::barrier(1,3,0)<1> * b::barrier(1,3,0)<1> |- true & flow __Fail.
print residue. //FAIL, D-COMBINE-1 --> fail

//(22)
//(22) & (23) -> our lemma application is independent
// of ordering of heap nodes
checkentail b::barrier(1,3,0)<1> * b::barrier(0,3,-1)<2> |- true & flow __Fail.
print residue. //VALID, D-FAIL-2 --> fail

//(23)
checkentail b::barrier(0,3,-1)<2> * b::barrier(1,3,0)<1> |- true & flow __Fail.
print residue. //VALID, D-FAIL-2 --> fail

//(24)
//24&25 --> ordering of heap nodes can be important for the residue
checkentail b::barrier(1,3,0)<1> * b::barrier(1,3,0)<1> * b::barrier(0,3,-1)<2> |- true & flow __Fail.
print residue. //VALID, 1 residue, no heap, D-COMBINE-1 --> D-FAIL-2

//(25)
checkentail b::barrier(1,3,0)<1> * b::barrier(0,3,-1)<2>  * b::barrier(1,3,0)<1> |- true & flow __Fail.
print residue. //VALID, 1 residue, 1 heap,D-FAIL-2

//(26)
//Example of D-SEP, which is done automatically in xpure_perm
checkentail b1::barrier(c1,t1,a1)<p1> * b2::barrier(c2,t2,a2)<p2> & t1!=t2 |- b1!=b2.
print residue. //VALID, D-SEP

//(27)
//Example of D-SEP, which is done automatically in xpure_perm
checkentail b1::barrier(c1,t1,a1)<p1> * b2::barrier(c2,t2,a2)<p2> & c1+c2>t1+a1+a2 |- b1!=b2.
print residue. //VALID, D-SEP

