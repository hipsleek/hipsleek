/*
  For static barriers, a=0 always
*/

//********************************************
lemma "S-SPLIT" self::barrier(c,t,0)<p> & 0<c<=t & c=c1+c2 & 0<c1<t & 0<c2<t -> self::barrier(c1,t,0)<p> * self::barrier(c2,t,0)<p>.

//combine successfully
lemma "S-COMBINE" self::barrier(c1,t,0)<p> * self::barrier(c2,t,0)<p> -> self::barrier(c1+c2,t,0)<p>.

//detect inconsistency
lemma "S-FAIL" self::barrier(c1,t,0)<p1> * self::barrier(c2,t,0)<p2> & p1!=p2 & flow __norm -> true & flow __Fail.
//********************************************

//(1)
checkentail b::barrier(2,2,0)<_> |- b::barrier(1,2,0)<_>*b::barrier(1,2,0)<_>.
print residue. //VALID, 1 residue

//(2)
checkentail b::barrier(1,2,0)<p1> * b::barrier(1,2,0)<p1>  |- b::barrier(2,2,0)<p2>.
print residue. //VALID, COMBINE, 1 residue

//(3)
checkentail b::barrier(1,2,0)<0> * b::barrier(1,2,0)<1>  |- true & flow __Fail.
print residue. //VALID, COMBINE, 1 residue

//(4)
checkentail b::barrier(1,2,0)<i'-i> * b::barrier(1,2,0)<j'-j> & i'=i+10 & i=0 & j'=j+10 & j=i+10 |- b::barrier(2,2,0)<_>.
print residue. //VALID, 1 residue

//(5)
checkentail b::barrier(1,2,0)<p1> |- b::barrier(1,2,0)<p1>.
print residue. //VALID, COMBINE, 1 residue
