data node {
	int val; 
	node next;	
}.

pred ll<n> == self = null & n = 0 
	or self::node<_, q> * q::ll<n-1> 
  inv n >= 0.

// expecting x!=null 
// & flow should be just __norm
//(1)
infer [x] x=null |- x::node<_,b>.
print residue.
/*
Inferred Pure:[ x!=null]
<1>false & false &{FLOW,(1,20)=__flow}
*/

// expecting x!=null to be inferred
// with residue b::ll<n-1>.
//(2)
infer [x] x::ll<n> |- x::node<_,b>.
print residue.
/*
Infer  (16): Valid.
<1>EXISTS(flted_7_45: b::ll<flted_7_45>@M[Orig] & flted_7_45+1=n & {FLOW,(17,18)=__norm})
inferred pure: [x!=null]
*/

// @M <: @I <: @L

//(3)
infer [y,b] b!=null |- y::node<a,b> * b::ll<m>.
print residue.
/*
// why did we get false?
Infer  (26): Valid.
Inferred Heap:[ y::node<inf_365,inf_b_366>[Orig]]
Inferred Pure:[]
<1>false & false & {FLOW,(17,18)=__norm}
*/

//(4)
infer [y,b] b!=null |- y::node<a,b>@I * b::ll<m>@I.
print residue.
/*
<1>true & b!=null & a=inf_a_77 & m=inf_m_81 & inf_ann_80<=1 & inf_ann_76<=1 & inf_b_78=b & {FLOW,(17,18)=__norm}
inferred heap: [y::node<inf_a_77,inf_b_78>@inf_ann_76[Orig]; 
               b::ll<inf_m_81>@inf_ann_80[Orig][LHSCase]]
inferred pure: [inf_b_78=b; inf_ann_76<=1; inf_ann_80<=1]
*/


// below requires remove_infer_vars_all
// which example requires remove_infer_vars_partial?
// (5)
infer [y,b] b!=null |- y::node<a,b> * b::ll<m>.
print residue.
/*
<1>true & b!=null & a=inf_a_96 & m=inf_m_100 & inf_ann_99<=0 & inf_ann_95<=0 & inf_b_97=b & {FLOW,(17,18)=__norm}
inferred heap: [y::node<inf_a_96,inf_b_97>@inf_ann_95[Orig]; 
               b::ll<inf_m_100>@inf_ann_99[Orig][LHSCase]]
inferred pure: [inf_b_97=b; inf_ann_95<=0; inf_ann_99<=0]
*/

// (6)
infer [y] b!=null |- y::node<a,b> * b::ll<m>.
print residue.
/*
Entail  (6): Fail.(may) cause:(failure_code=15.3)  true |-  y!=null (may-bug).
*/

// (7)
infer [n] x::ll<n> |- x::node<_,q>*q::node<_,null>.
print residue.
/*
<1>EXISTS(flted_7_146,q_162,flted_7_160: q_162::ll<flted_7_160>@M[Orig] & flted_7_160+1=flted_7_146 & flted_7_146+1=n & n=2 & {FLOW,(17,18)=__norm})
inferred pure: [n=2; n!=0; n!=1]
*/

// (8)
infer [x] x::ll<n> |- x::node<_,q>*q::node<_,null>.
print residue.


// (9)
infer [x] x::ll<n> |- x::node<_,q>*q::ll<m>.
print residue.

// (10)
infer [n] x::ll<n> |- x::node<_,q>*q::ll<m>.
print residue.
