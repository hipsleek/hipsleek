data node {
	int val; 
	node next;	
}.

pred ll<n> == self = null & n = 0 
	or self::node<_, q> * q::ll<n-1> 
  inv n >= 0.

HeapPred H1(node y).

// (1) Valid
infer [H1] H1(y) |- y::node<a,b> * b::node<c,d>.
print residue.

// (2) Valid
infer [H1] H1(y) |- y::node<a,b>.
print residue.

// (3) Valid
infer [H1] H1(y) |- y::ll<n>.
print residue.

// (4) OK to Fail
infer [n] true |- y::ll<n>.
print residue.
/*

Fail. (may) cause:(failure_code=15.3)  true |-  y!=null;  n=0 | n=n_48 & 1<=n_48 |-  n_48=n (may-bug).
*/

// (5) Fail
// TODO we should infer n!=0 -- not really
infer [n] n=0 |- y::ll<n>.
print residue.
/*
Infer  (5): Fail. (may) cause:(failure_code=15.3)  true |-  y!=null;  n=0 & n=0 |-  n_70=n (may-bug).
*/

// (6) Valid
infer [n] n=0 & y=null |- y::ll<n>.
print residue.

// (7) Valid & inferred n=0
infer [n] y=null |- y::ll<n>.  
print residue.

// (8) Fail
infer [n] y!=null |- y::ll<n>. // fail
print residue.

// (9) OK (inferred n!=1)
infer [n] n=1 & y=null |- y::ll<n>.
print residue.

// (10) Valid
HeapPred H2(node y).
infer [H1,n] H1(y) |- y::ll<n> & n=0.
print residue.

// (11) Valid : inferred x!=null
infer [x] x=null |- x::node<_,null>.
print residue.

// (12)
// Inferred n=1

infer [n] y::ll<n> |- y::node<_,null>.
print residue.
/*
Inferred Heap:[]
Inferred Pure:[ n=1, n!=0 & 0<=n]
<1>EXISTS(q_160,flted_7_159: q_160::ll<flted_7_159>[Orig] & flted_7_159=0 & 
n=1 &
{FLOW,(17,18)=__norm})
*/

// (13)
// inferred n>0
infer [n] y::ll<n> |- y::node<_,b>.
print residue.
/*
Inferred Heap:[]
Inferred Pure:[ n!=0 & 0<=n]
<1>EXISTS(flted_7_179: b::ll<flted_7_179>[Orig] & flted_7_179+1=n &
{FLOW,(17,18)=__norm})
*/

// (14) Inferred n=0
infer [n] y::ll<n> |- y=null.
print residue.

// (15) inferred y=null
infer [y] y::ll<n> |- y=null.
print residue.

// (16) inferred y=null & n=0
infer [y,n] y::ll<n> |- y=null.
print residue.
/*
Inferred Heap:[]
Inferred Pure:[ n=0 & y=null]
<1>y::ll<n>[Orig][LHSCase] & n=0 & y=null &
{FLOW,(17,18)=__norm}
*/

// (17) fail
infer [y] y::ll<n> |- y::node<_,null>.
print residue.


// (18) fail
// Inferred n=1
infer [y,n] y::ll<n> |- y::node<_,null>.
print residue.
/*
TODO : n=1 actually subsumes n>=0 & !(n=0 & y=null)
TODO : can it be removed if we have a post-processing ..
Inferred Heap:[]
Inferred Pure:[ !(n=0 & y=null) & 0<=n, n=1]
<1>EXISTS(q_236,flted_7_235: q_236::ll<flted_7_235>[Orig] & flted_7_235=0 & 
n=1 &
{FLOW,(17,18)=__norm})
*/

// (19) inferred n=1
infer [n] y::ll<n> |- y::node<_,null>.
print residue.
/*
Inferred Heap:[]
Inferred Pure:[ n=1, n!=0 & 0<=n]
<1>EXISTS(q_260,flted_7_259: q_260::ll<flted_7_259>[Orig] & flted_7_259=0 & 
n=1 &
{FLOW,(17,18)=__norm})
*/

// (20) inferred x!=null
infer [x] x=null |- x::node<_,b>.
print residue.


// (21) 
// Inferred x!=null
infer [x] x::ll<n> |- x::node<_,b>.
print residue.
/*
Inferred Heap:[]
Inferred Pure:[ x!=null]
<1>EXISTS(flted_7_285: b::ll<flted_7_285>[Orig] & flted_7_285+1=n &

*/

// (22) inferred nn=1
infer [nn] y::ll<nn> |- y::node<_,null>.
print residue.
/*
Inferred Heap:[]
Inferred Pure:[ n=1, n!=0 & 0<=n]
<1>EXISTS(q_309,flted_7_308: q_309::ll<flted_7_308>[Orig] & flted_7_308=0 & 
n=1 &
*/

// (23)
infer [n] y::ll<n> |- y=null.
print residue.
// Inferred Pure:[ n=0]

// (24)
infer [n] y::ll<n> |- y::node<a,b>.
print residue.
//Inferred Pure:[ n!=0 & 0<=n]
// WN : should be better to use n!=0

// (25)
infer [y] true |- y::node<a,b> * y::node<_,_>.
print residue.
//Infer  (20): Valid.
//Inferred Heap:[ y::node<inf_269,inf_270>[Orig], y::node<inf_Anon_271,inf_Anon_272>[Orig]]
// WN : if inferred pre is FALSE, better to denote scenario as an error?

// (26)
infer [y] true |- y::node<a,b> * y::ll<m>.
print residue.

// (27)
infer [y] m=-1 |- y::node<a,b> * b::ll<m>.
print residue.
//Inferred Heap:[ y::node<inf_310,inf_311>[Orig], b::ll<inf_m_315>[Orig][LHSCase]]
//Inferred Pure:[ b=inf_311, a=inf_310 & b=inf_311 & inf_m_315=0 - 1]
// inferred pre is false

// (28)
infer [y,m] m=-1 |- y::node<a,b> * b::ll<m>.
print residue.
// Old inferred pure: (m!=-1 | inf_m_37<=-1)
// (m!=-1 | inf_m_37<=-1) doesn't cause contradiction
// Eliminate inf_m_37<=-1 only.
// Not sure about the inferred heap?
/*
Entail  (28): Valid. 
<1>false & false & {FLOW,(17,18)=__norm}
inferred heap: [y::node<inf_a_34,inf_b_35>@inf_ann_33[Orig]; 
               inf_b_35::ll<inf_m_37>@inf_ann_36[Orig][LHSCase]]
inferred pure: [m!=-1; inf_ann_33<=0; inf_ann_36<=0]
*/
/*
Inferred Heap:[ y::node<inf_351,inf_352>[Orig], b::ll<inf_m_356>[Orig][LHSCase]]
Inferred Pure:[ b=inf_352, a=inf_351 & b=inf_352 & inf_m_356=0 - 1 & m=0 - 1]
<1>true & m+1=0 & a=inf_351 & b=inf_352 & a=inf_351 & b=inf_352 & 
inf_m_356=0 - 1 & m=0 - 1 &
{FLOW,(17,18)=__norm}
*/


// (29)

infer [H1] H1(y) |- y::node<a,b> * b::ll<m>.
print residue.

// (30)
// OK
infer [y,b] b!=null |- y::node<a,b> * b::ll<m>.
print residue.
/*
Inferred Heap:[ y::node<inf_422,inf_b_423>[Orig], b::ll<inf_428>[Orig][LHSCase]]
Inferred Pure:[ a=inf_422 & m=inf_428 & inf_b_423=b]
<1>true & inf_422=a & inf_428=m & b=inf_b_423 & inf_b_423!=null &
{FLOW,(17,18)=__norm}

*/








