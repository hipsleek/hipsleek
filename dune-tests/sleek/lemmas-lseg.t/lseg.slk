//Valid.Valid.Valid.Valid
data node { int val ; node next }.

/*
pred lseg<n, p> == self = p & n = 0
         or self::node<next = r> * r::lseg<n - 1, p>
         inv n >= 0.
*/

pred lseg<n, p> == 
  case {
    n=0 -> [] self = p & n = 0;
    n!=0 -> [] self::node<next = r> * r::lseg<n - 1, p>;
  }  inv n >= 0.


lemma "V11" self::lseg<n, p> & n = a + b & a,b >=0 -> self::lseg<a, r> * r::lseg<b, p>.

lemma "V12" self::lseg<a, r> * r::lseg<b, p> <- self::lseg<n, p> & n = a + b & a,b >=0.

lemma "V21" self::lseg<n, p> & n = a + b & a,b >=0 <- self::lseg<a, r> * r::lseg<b, p>.

lemma "V22" self::lseg<a, r> * r::lseg<b, p> -> self::lseg<n, p> & n = a + b & a,b >=0.
