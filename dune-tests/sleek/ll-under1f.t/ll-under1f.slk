/* avl trees */

/* representation of a node in an avl tree */
data node {
  int val;
  node next;
}.


pred ll<n,m> == self=null & n=0 & m=0
   or self::node<_,q>*q::ll<n-1,m-1>
   or self::node<_,q>*q::ll<n-1,m-2>
//inv BG([],n>=0 & m>=0) 
//inv BG([],self=null & n>=0 & m>=0) 
inv BG([],self=null & n=0 & m=0) | BG([self], n>=0 & m>=0)
//inv BG([],self=null & n=0 & m=0) | BG([self], n>=0 & m>=0 & m<=2*n)
//inv BG([],self=null & n=0 & m=0) | BG([self], n>=0 & m>=0 & m<=n)
//inv_sat BG([],n>=0 & m>=0) 
//inv_sat BG([],self=null & n=0 & m=0) 
//inv_sat BG([],self=null & n=0 & m=0) | BG([self], n=1 & (m=1|m=2)) 
inv_sat BG([],self=null & n=0 & m=0) | BG([self], n=1 & (m=1|m=2|m=3)) 
//inv_sat BG([],self=null & n=0 & m=0) | BG([self],0<n & m>0)
//inv_exact BG([],self=null & n=0 & m=0) | BG([self],0<m & n<=m<=3*n)
.
//checkentail false |- true.


/*
# ll-under1f.slk --inv-test

Valid.(Over)
Failure.(Under)

*/