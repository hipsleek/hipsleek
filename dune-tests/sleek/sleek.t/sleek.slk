data node { int val ; node next }.

pred ll<n> == self = null & n = 0
	or self::node<next = r> * r::ll<n - 1>
	inv n >= 0.

checkentail x=null |- x::ll<0>.

checkentail x::node<_, null> |- x::ll<m> & m = 1.

checkentail x::node<_, r> * r::node<_, r2> * r2::ll<n> |- x::ll<n + 2>.
checkentail x::node<_, r> * r::node<_, r2> * r2::ll<n> |- x::ll<n + 1>.

//checkentail x::node<_, null> |- x::ll<3>.
print residue.

//checkentail x::ll<n> /** r::ll<n>*/ |- x::ll<n+1>.


let $a = x' = 1.
let $b = x' = x + 1.
let $c = compose[x]($a; $b).
let $d = x' = 3.
