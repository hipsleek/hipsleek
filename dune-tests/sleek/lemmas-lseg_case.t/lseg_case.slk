//Valid.Valid.Valid.Valid.Valid.Valid.
data node { int val ; node next }.

pred lseg<n, p> == case {
     n=0 -> [] self = p & n = 0;
     n!=0 ->  [] self::node<next = r> * r::lseg<n - 1, p>; 
     }
     inv n >= 0.


lemma_safe "V1" self::lseg<n, p> & n = a + b & a,b >=0 ->  self::lseg<a, r> * r::lseg<b, p>.

lemma_safe "V2" self::lseg<n, p> &  n = a + b & a,b >=0 <- self::lseg<a, r> * r::lseg<b, p>.

lemma_safe "V3" self::lseg<n, p> &  n = a + b & a,b >=0 <-> self::lseg<a, r> * r::lseg<b, p>.

lemma_safe "V4" self::lseg<a, r> * r::lseg<b, p> & n = a + b & a,b >=0 -> self::lseg<n, p>.

lemma_safe "V5" self::lseg<a, r> * r::lseg<b, p> & n = a + b & a,b >=0 <- self::lseg<n, p>.
/* 
  forall a,b. self::lseg<n, p> & n = a + b & a,b >=0 
   -->  self::lseg<a, r> * r::lseg<b, p>
*/

lemma_safe "V6" self::lseg<a, r> * r::lseg<b, p> & n = a + b & a,b >=0 <-> self::lseg<n, p>.