data node {
	int val; 
	node next;	
}.

pred ll<n> == self = null & n = 0 
	or self::node<_, q> * q::ll<n-1> 
  inv n >= 0.

//checkentail true |- x::ll<n>.

//infer[x] x=null |- x::ll<n>  .
// OK

//infer[x] true |- x::ll<n> * y::node<a,b>  .
//infer[x] true |- x::ll<n>.
/*
WHY is es_infer_heap empty?

               es_infer_label:  true & true & {FLOW,(1,20)=__flow}
               es_infer_invs:  ]

WHY isn't below added to infer_heap?
PRECOND:  x::ll<n>[Orig][LHSCase] & true & {FLOW,(1,20)=__flow}
*/

//infer [x] x=null & n=0 |- x::node<a,b>.
/*
Result below is not correct. Should infer x!=null instead.

PRECOND:  x::node<Anon_29,Anon_30>[Orig] & true & {FLOW,(1,20)=__flow}
Infer  (1): Valid.
               es_infer_label:  true & true & {FLOW,(17,18)=__norm}]

*/

//infer [n] x=null & n=0 |- x::node<_,_>.
/*
Got below but expecting n!=0..

Infer  (1): Fail. (must) cause:15.1 x=null |-  x!=null (must-bug).
*/
//infer [y] true   |- x::node<a,b>.
/*
Error may be too strong ...
ERROR: at File "",Line:0,Col:0 
Message: y is not found in both sides
 exception in Infer  (1) check
*/
//infer [x] n<0   |- x::ll<n>.
//infer [x] n=0 & x=y  |- y::ll<n>.

HeapPred H1(node y).
infer [H1] H1(x) & n=0 & x=y  |- y::ll<n>.

//infer [x] x=y  |- y::ll<n>.
//infer [x] x=y  |- [n] y::ll<n>.

//infer [x] true   |- x::node<a,b>.
/*
infer_heap_main inp1 : x::node<a,b>[Orig]
infer_heap_main inp2 :[x]
infer_heap_main inp3 :[x]
infer_heap_main@1 EXIT out :([x,a,b], x::node<a,b>[Orig])
*/

//infer [x] true   |- x::node<a,b>*y::ll<n>.
/*
infer_heap_main inp1 : x::node<a,b>[Orig] * y::ll<n>[Orig][LHSCase]
infer_heap_main inp2 :[x]
infer_heap_main inp3 :[x]
infer_heap_main@2 EXIT out :([x], x::node<a,b>[Orig] * true)
*/

//infer [x,y] b::node<1,y>   |- x::node<_,b>*b::node<_,y>*y::node<_,null>.
/*
Above fails with:
PRECOND:  x::node<Anon_49,b_47>[Orig] * y::node<Anon_51,flted_59_52>[Orig] & true &
{FLOW,(1,20)=__flow}
Infer  (1): Fail. (may) cause:(failure_code=213)  true |-  b_47=b;  true |-  flted_59_52=null (may-bug).
*/


//infer [n] x::ll<n> |- x::node<_,p> .
//infer [n] x::ll<n> |- x::node<_,null>.
//infer [p] x::node<1,p> |- x::ll<n> .
print residue.
