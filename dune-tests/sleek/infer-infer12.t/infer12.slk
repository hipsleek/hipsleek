data node {
	int val; 
	node next;	
}.

pred ll<n> == self = null & n = 0 
	or self::node<_, q> * q::ll<n-1> 
  inv n >= 0.

// (1) 5.slk (9) lhs & rhs -> false
infer [n] n>0 & n>m  |- false.
print residue.
/*
Inferred Pure:[ 1>n]
<1>false & false &
*/

// (2) 
infer [p] x::node<p,q> & m>2  |- x::node<a,b> & a>m.
print residue.
//Infer  (2): Fail.(may) cause:(failure_code=213)  2<m & a=p |-  m<a (may-bug).

// (3) 
infer [p,m] x::node<p,q> & m>2  |- x::node<a,b> & a>m.
print residue.
//Infer  (2): Fail.(may) cause:(failure_code=213)  2<m & a=p |-  m<a (may-bug).

// (4) 
infer [p] m>2  |- p>m & m>4.
print residue.
//Inferred Pure:[ m<p]

// (5) 
infer [m] m>2  |- p>m & m>4.
print residue.
//Infer  (4): Fail.(may) cause:(failure_code=213)  5<=m |-  m<p (may-bug).

// (6) 
infer [m] m>2 & m=p  |- p>m & m>4.
print residue.
//Inferred Pure:[ 3>m]

// (7) 
infer [m] m>2 & m=p  |- p>=m & m>4.
print residue.
//Inferred Pure:[ 3>m]

// (8) 
infer [p,m] m>2  |- p>m & m>4.
print residue.
//Inferred Pure:[ 5<=m & m<p]


// (9) 
infer [p,m] m>6  |- p>m & m>4.
print residue.
//Inferred Pure:[ m<p]
//Should be: (m<p) then succeed

// (10) 
infer [p] m>6  |- p>m & m>4.
print residue.
//Inferred Pure:[ p>=6] then fail.
//Infer  (7): Fail.(may) cause:(failure_code=213)  6<m |-  m<p (may-bug).

// (11) 
infer [p] m>6  |- p>m & m>4 & p>5.
print residue.
/*
Fail ..
*/

// (12) 
infer [p] m>6  |- (exists m: p>m & m>4 & p>5).
print residue.
//Inferred Pure:[ 6<=p]


// (13) 
infer [p] m>6  |- p>m & m>z.
print residue.
//Inferred Pure:
//Should be: (exists z,m:(z+1)<=m & m<p) then fail?
//Infer  (10): Fail.(may) cause:(failure_code=213)  6<m |-  z<m;  6<m |-  m<p (may-bug).

//  (14) Fail
infer [q] n!=0 |- q::ll<n> .
print residue.

// (15) Fail
infer [x] n<0   |- x::ll<n>.
print residue.


// (16) Fail
infer [x] x::ll<n>   |- x::node<a,b>.
print residue.

// (17) Fail
infer [n] x::ll<n>   |- x::node<a,b>.
print residue.

// (18) Fail
infer [x,n] x::ll<n>   |- x::node<a,b>.
print residue.
// TODO : possible to remove inv n>=0?
//Inferred Pure:[ !(n=0 & x=null) & 0<=n]
