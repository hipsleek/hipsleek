data node {
	int val; 
	node next;	
}.

pred ll<n> == self = null & n = 0 
	or self::node<_, q> * q::ll<n-1> 
  inv n >= 0.

HeapPred H1(node x).
HeapPred H2(node x, int n).

// (1)
infer [H1] H1(y) |- y::node<a,b>.
print residue.

// (2)
infer [H1] H1(y) |- y::ll<n>.
print residue.

// (3)
infer [H1]  H1(y) |- y::node<a,b> * b::node<c,d>.
print residue.

// (4)
infer [H1]  H1(y) |- y::node<a,b> * b::ll<m>.
print residue.

// (5)
infer [H1]  H1(x) & x=y  |- y::ll<n>.
print residue.

// (6)
infer [H1] H1(x) & n=0 & x=y  |- y::ll<n>.
print residue.

// (7)
infer [H1] H1(x) & x=y |- x::ll<n> .
print residue.

// (8)
infer [ia,ib] y::node<ia,ib> |- y::node<a,b>.
print residue.

// (9)
infer [H1]  H1(y) |- (exists a: y::node<a,null> & a>0).
print residue.

// (10)
infer [aa]  y::node<aa,null> |- (exists a: y::node<a,null> & a>0).
print residue.

// (11)
infer [m] y::ll<m> |- y::ll<n>.
print residue.

// (12)
infer [x] x=null |- x::node<_,null> .
print residue.

// (13)
infer [y] y=null |- y::node<a,b>.
print residue.


